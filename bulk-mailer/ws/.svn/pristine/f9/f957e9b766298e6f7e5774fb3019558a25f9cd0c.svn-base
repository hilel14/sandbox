package beeriprint.newsletter.camel;

import beeriprint.newsletter.model.StatusUpdate;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.HashMap;
import java.util.Map;
import org.apache.camel.Exchange;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 *
 * @author hilel
 */
public class QueryBuilder {

    final Logger logger = LoggerFactory.getLogger(getClass());
    //final DateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
    final String updateDsn
            = "UPDATE email SET action_code  = :?actionCode, status_code = :?statusCode, diagnostic_code = :?diagnosticCode "
            + "WHERE id = :?messageCode";
    final String insertOpened
            = "INSERT INTO activity (email_id, activity_time, activity_type, resource_id) "
            + "VALUES (:?messageCode, :?requestTime, 'opened', 0)";
    final String insertClicked
            = "INSERT INTO activity (email_id, activity_time, activity_type, resource_id) "
            + "VALUES (:?messageCode, :?requestTime, 'clicked', :?resourceId)";
    final String selectEmailByMessage
            = "SELECT user_part, domain_part FROM email WHERE id = ?";
    final String insertUnsubscribe
            = "INSERT INTO unsubscribe (email, request_time) VALUES (:?email, :?requestTime)";
    Map updateParameters;

    public void updateDsn(Exchange exchange, StatusUpdate statusUpdate) throws Exception {
        updateParameters = new HashMap();
        updateParameters.put("messageCode", statusUpdate.getMessageCode());
        updateParameters.put("actionCode", statusUpdate.getActionCode());
        updateParameters.put("statusCode", statusUpdate.getStatusCode());
        updateParameters.put("diagnosticCode", statusUpdate.getDiagnosticCode());
        exchange.getOut().setBody(updateDsn);
        exchange.getOut().setHeader("CamelJdbcParameters", updateParameters);
    }

    public void insertOpened(Exchange exchange, StatusUpdate statusUpdate) throws Exception {
        updateParameters = new HashMap();
        updateParameters.put("messageCode", statusUpdate.getMessageCode());
        updateParameters.put("requestTime", statusUpdate.getRequestTime().getTime());
        exchange.getOut().setBody(insertOpened);
        exchange.getOut().setHeader("CamelJdbcParameters", updateParameters);
    }

    public void insertClicked(Exchange exchange, StatusUpdate statusUpdate) throws Exception {
        updateParameters = new HashMap();
        updateParameters.put("messageCode", statusUpdate.getMessageCode());
        updateParameters.put("requestTime", statusUpdate.getRequestTime().getTime());
        updateParameters.put("resourceId", statusUpdate.getResourceId());
        exchange.getOut().setBody(insertClicked);
        exchange.getOut().setHeader("CamelJdbcParameters", updateParameters);
    }

    public void selectEmailByMessage(Exchange exchange, StatusUpdate statusUpdate) throws Exception {
        updateParameters = new HashMap();
        updateParameters.put("messageCode", statusUpdate.getMessageCode());
        exchange.getOut().setBody(selectEmailByMessage);
        exchange.getOut().setHeader("CamelJdbcParameters", updateParameters);
    }

    public void insertUnsubscribe(Exchange exchange, ArrayList<HashMap<String, Object>> results) throws Exception {
        if (results.size() == 1) {
            exchange.getOut().setHeader("NewsletterEmailFound", true);
            HashMap<String, Object> record = results.get(0);
            String userPart = record.get("user_part").toString().toLowerCase();
            String domainPart = record.get("domain_part").toString().toLowerCase();
            updateParameters = new HashMap();
            updateParameters.put("email", userPart + "@" + domainPart);
            updateParameters.put("requestTime", Calendar.getInstance().getTime());
            exchange.getOut().setBody(insertUnsubscribe);
            exchange.getOut().setHeader("CamelJdbcParameters", updateParameters);
        } else {
            exchange.getOut().setHeader("NewsletterEmailFound", false);
        }
    }
}
