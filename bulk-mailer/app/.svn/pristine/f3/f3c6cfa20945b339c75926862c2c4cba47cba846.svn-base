package beeriprint.newsletter.batch.mailer.processors;

import beeriprint.newsletter.batch.mailer.model.Campaign;
import beeriprint.newsletter.batch.mailer.model.EmailRecord;
import java.nio.file.Paths;
import java.util.Arrays;
import java.util.Date;
import java.util.List;
import java.util.UUID;
import org.slf4j.LoggerFactory;
import org.springframework.batch.item.ItemProcessor;
import org.springframework.jdbc.core.BeanPropertyRowMapper;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.jdbc.core.ResultSetExtractor;
import org.springframework.jdbc.core.RowMapper;
import org.springframework.jdbc.core.RowMapperResultSetExtractor;
import org.springframework.jdbc.core.SingleColumnRowMapper;

/**
 *
 * @author hilel
 */
public class ImportProcessor implements ItemProcessor<EmailRecord, EmailRecord> {

    private static final org.slf4j.Logger LOGGER = LoggerFactory.getLogger(ImportProcessor.class);
    private final Campaign campaign;
    private final List<String> unsubscribers;
    private final JdbcTemplate jdbcTemplate;

    public ImportProcessor(String templateName, String campaignDate, String listFile, JdbcTemplate jdbcTemplate) {
        this.jdbcTemplate = jdbcTemplate;
        campaign = findCampaign(templateName, campaignDate, listFile);
        unsubscribers = findUnsubscribers();
    }

    private Campaign findCampaign(String templateName, String campaignDate, String listFile) {
        String fileName = Paths.get(listFile).getFileName().toString();
        String sqlSelect = "SELECT * FROM campaign WHERE template_name = ? AND campaign_date = ? AND list_file = ?";
        Object[] args = new Object[]{templateName, campaignDate, fileName};
        LOGGER.info("Campaign params = " + Arrays.toString(args));
        List<Campaign> campaigns = jdbcTemplate.query(sqlSelect, args, BeanPropertyRowMapper.newInstance(Campaign.class));
        switch (campaigns.size()) {
            case 0:
                LOGGER.info("Creating new campaign record");
                String sqlUpdate = "INSERT INTO campaign (template_name, campaign_date, list_file) VALUES (?,?,?)";
                jdbcTemplate.update(sqlUpdate, args);
                campaigns = jdbcTemplate.query(sqlSelect, args, BeanPropertyRowMapper.newInstance(Campaign.class));
                break;
            case 1:
                LOGGER.info("Existing campaign record found with id = " + campaigns.get(0).getId());
                break;
            default:
                throw new IllegalArgumentException(campaigns.size() + " campaigns found, but only 1 was expected");
        }
        return campaigns.get(0);
    }

    private List<String> findUnsubscribers() {
        String sql
                = "SELECT DISTINCT(CONCAT(user_part, '@', domain_part)) AS email "
                + "FROM activity, email "
                + "WHERE activity_type = 'unsubscribe' "
                + "AND activity.email_id = email.id";
        RowMapper rowMapper = new SingleColumnRowMapper();
        ResultSetExtractor resultSetExtractor = new RowMapperResultSetExtractor(rowMapper);
        List<String> removedRecipients = (List<String>) jdbcTemplate.query(sql, resultSetExtractor);
        LOGGER.info(removedRecipients.size() + " removed recipients found");
        return removedRecipients;
    }

    @Override
    public EmailRecord process(EmailRecord item) throws Exception {
        LOGGER.info("processing recipient " + item.getRecipientAddress());
        LOGGER.info("recipient state = " + item.getRecipientState());
        // filter recipients with NotActive state id from ActiveTrail
        if (item.getRecipientState().equalsIgnoreCase("NotActive")) {
            LOGGER.info("Skipping recipient " + item.getRecipientAddress() + " (not active)");
            return null;
        }
        // filter recipients who asked to unsubscribe in the past
        if (unsubscribers.contains(item.getRecipientAddress())) {
            LOGGER.info("Skipping recipient " + item.getRecipientAddress() + " (unsubscribed)");
            return null;
        }
        // include all other recipients
        item.setId(UUID.randomUUID().toString().replaceAll("-", ""));
        item.setCampaign(campaign);
        item.setCreationTime(new Date());

        String sql
                = "INSERT INTO email (id, campaign_id, recipient_name, user_part, domain_part, created) "
                + "VALUES (?,?,?,?,?,?)";
        jdbcTemplate.update(sql, item.valuesAsArray());
        
        return item;
    }

}
