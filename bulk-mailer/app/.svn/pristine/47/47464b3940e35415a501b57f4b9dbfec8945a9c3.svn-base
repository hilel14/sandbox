<?xml version="1.0" encoding="UTF-8"?>

<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:batch="http://www.springframework.org/schema/batch"
       xmlns:jdbc="http://www.springframework.org/schema/jdbc"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:util="http://www.springframework.org/schema/util"
       xsi:schemaLocation="
          http://www.springframework.org/schema/beans   http://www.springframework.org/schema/beans/spring-beans.xsd
          http://www.springframework.org/schema/batch   http://www.springframework.org/schema/batch/spring-batch.xsd
          http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
          http://www.springframework.org/schema/util    http://www.springframework.org/schema/util/spring-util.xsd
          http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc-4.0.xsd">

    <description>
        Create and send one time message to recipients
    </description>

    <import resource="classpath:launch-context.xml" />

    <batch:job id="clickb-upgrade">

        <batch:step id="step1">
            <batch:tasklet>
                <batch:chunk reader="fileReader" processor="compositeProcessor" writer="emailSender" commit-interval="1" />
            </batch:tasklet>
        </batch:step>
    </batch:job>

    <bean id="fileReader" class="org.springframework.batch.item.file.FlatFileItemReader" scope="step">
        <property name="resource" value="#{jobParameters['list_file']}" />
        <property name="encoding" value="utf-8" />
        <property name="linesToSkip" value="1" />
        <property name="lineMapper">
            <bean class="org.springframework.batch.item.file.mapping.DefaultLineMapper">
                <property name="lineTokenizer">
                    <bean class="org.springframework.batch.item.file.transform.DelimitedLineTokenizer">
                        <property name="strict" value="true" />
                        <property name="includedFields" value="4,5" />
                        <property name="names" value="recipientAddress, recipientName" />
                        <property name="delimiter">
                            <util:constant static-field="org.springframework.batch.item.file.transform.DelimitedLineTokenizer.DELIMITER_COMMA"/>
                        </property>
                    </bean>
                </property>
                <property name="fieldSetMapper">
                    <bean class="org.springframework.batch.item.file.mapping.BeanWrapperFieldSetMapper" >
                        <property name="prototypeBeanName" value="emailRecord"/>
                    </bean>
                </property>
            </bean>
        </property>
    </bean>

    <bean id="compositeProcessor" class="org.springframework.batch.item.support.CompositeItemProcessor">
        <property name="delegates">
            <list>
                <bean id="importProcessor" class="beeriprint.newsletter.batch.mailer.processors.BasicImporter" scope="step">
                    <constructor-arg value="#{jobParameters[template_name]}" />
                    <constructor-arg value="#{jobParameters[campaign_date]}" />
                    <constructor-arg value="#{jobParameters[list_file]}" />
                    <constructor-arg ref="jdbcTemplate" />
                </bean>
                <bean  id="emailCreator" class="beeriprint.newsletter.batch.mailer.processors.EmailCreator" scope="step">
                    <property name="appServer" value="${newsletter.web.server}" />
                    <property name="mailHost" value="${newsletter.mail.host}" />
                    <property name="senderName" value="${sender.name}" />
                    <property name="senderAddress" value="${sender.address}" />
                    <property name="replyToAddress" value="${reply.to.address}" />
                    <property name="subject" value="${subject}" />
                    <property name="configuration" ref="freeMarkerConfigurationFactoryBean" />
                </bean>
            </list>
        </property>
    </bean>

    <bean id="emailSender" class="org.springframework.batch.item.mail.javamail.MimeMessageItemWriter">
        <property name="javaMailSender">
            <bean id="newsletterMailSender" class="org.springframework.mail.javamail.JavaMailSenderImpl">
                <property name="host" value="${newsletter.mail.host}" />
                <property name="port" value="${newsletter.mail.port}" />
                <property name="username" value="${newsletter.mail.username}" />
                <property name="password" value="${newsletter.mail.password}" />
                <property name="defaultEncoding" value="UTF-8" />
                <property name="javaMailProperties">
                    <props>
                        <prop key="mail.smtp.auth">true</prop>
                        <prop key="mail.smtp.starttls.enable">true</prop>
                    </props>
                </property>
            </bean>
        </property>
    </bean>

    <!-- message headers and tempalate -->

    <context:property-placeholder location="classpath:templates/clickb-upgrade.xml"/>

    <bean id="freeMarkerConfigurationFactoryBean" class="org.springframework.ui.freemarker.FreeMarkerConfigurationFactoryBean">
        <property name="templateLoaderPath" value="classpath:templates" />
    </bean>

    <!-- Newsletter database configuration -->

    <bean id="newsletterDataSource" class="org.apache.commons.dbcp2.BasicDataSource">
        <property name="driverClassName" value="${newsletter.jdbc.driver}" />
        <property name="url" value="${newsletter.jdbc.url}" />
        <property name="username" value="${newsletter.jdbc.user}" />
        <property name="password" value="${newsletter.jdbc.password}" />
        <property name="connectionProperties" value="useUnicode=true;characterEncoding=UTF-8;" />
    </bean>

    <!--  Initialise the database if enabled: -->
    <jdbc:initialize-database data-source="newsletterDataSource" enabled="${newsletter.data.source.init}" ignore-failures="DROPS">
        <jdbc:script location="${newsletter.drop.script}"/>
        <jdbc:script location="${newsletter.schema.script}"/>
    </jdbc:initialize-database>


    <!--  JDBC Template configuration -->
    <bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
        <property name="dataSource" ref="newsletterDataSource" />
    </bean>

    <!--  model classes -->
    <bean id="emailRecord" class="beeriprint.newsletter.batch.mailer.model.Email" scope="prototype"/>

</beans>
