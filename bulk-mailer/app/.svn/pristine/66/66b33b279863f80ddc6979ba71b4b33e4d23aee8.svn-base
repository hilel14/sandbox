<?xml version="1.0" encoding="UTF-8"?>

<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:batch="http://www.springframework.org/schema/batch"
       xmlns:jdbc="http://www.springframework.org/schema/jdbc"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:util="http://www.springframework.org/schema/util"
       xsi:schemaLocation="
          http://www.springframework.org/schema/beans   http://www.springframework.org/schema/beans/spring-beans.xsd
          http://www.springframework.org/schema/batch   http://www.springframework.org/schema/batch/spring-batch.xsd
          http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
          http://www.springframework.org/schema/util    http://www.springframework.org/schema/util/spring-util.xsd
          http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc-4.0.xsd">

    <description>
        Create emails from recipients file and html template, import to database and send.
    </description>

    <batch:job id="customers-newsletter">

        <batch:step id="create" next="import">
            <batch:tasklet>
                <batch:chunk reader="listFileReader" processor="emailCreator" writer="emailFileWriter" commit-interval="1" />
                <batch:listeners>
                    <batch:listener ref="stopListener" />
                </batch:listeners>
            </batch:tasklet>
        </batch:step>
       
        <batch:step id="import" next="send">
            <batch:tasklet>
                <batch:chunk reader="emailFolderReader" processor="compositeImportProcessor" writer="insertEmailJdbcWriter" commit-interval="1" />
                <batch:listeners>
                    <batch:listener ref="stopListener" />
                </batch:listeners>
            </batch:tasklet>
        </batch:step>

        <batch:step id="send">
            <batch:tasklet>
                <batch:chunk reader="emailFolderReader" processor="compositeSendProcessor" writer="emailSender" commit-interval="1" />
            </batch:tasklet>
        </batch:step>


    </batch:job>

    <!-- Create emails step -->

    <bean id="listFileReader" class="org.springframework.batch.item.file.FlatFileItemReader" scope="step">
        <property name="linesToSkip" value="1" />
        <property name="resource" value="#{jobParameters['list_file']}" />
        <property name="encoding" value="${list.file.encoding}" />
        <property name="lineMapper">
            <bean class="org.springframework.batch.item.file.mapping.DefaultLineMapper">
                <property name="lineTokenizer">
                    <bean class="org.springframework.batch.item.file.transform.DelimitedLineTokenizer">
                        <property name="strict" value="true" />
                        <property name="includedFields" value="0,1" />
                        <property name="names" value="recipientAddress, recipientName" />
                        <!--
                        <property name="delimiter">
                            <util:constant static-field="org.springframework.batch.item.file.transform.DelimitedLineTokenizer.DELIMITER_TAB"/>
                        </property>
                        -->
                    </bean>
                </property>
                <property name="fieldSetMapper">
                    <bean class="org.springframework.batch.item.file.mapping.BeanWrapperFieldSetMapper" >
                        <property name="prototypeBeanName" value="emailRecord"/>
                    </bean>
                </property>
            </bean>
        </property>
    </bean>

    <bean id="emailCreator" class="beeriprint.newsletter.batch.mailer.processors.EmailCreator" scope="step">
        <property name="templateName" value="#{jobParameters[template_name]}" />
        <property name="campaignDate" value="#{jobParameters[campaign_date]}" />
        <property name="appServer" value="${newsletter.web.server}" />
        <property name="mailHost" value="${newsletter.mail.host}" />
        <property name="senderName" value="${sender.name}" />
        <property name="senderAddress" value="${sender.address}" />
        <property name="replyToAddress" value="${reply.to.address}" />
        <property name="subject" value="${subject}" />
        <property name="configuration" ref="freeMarkerConfigurationFactoryBean" />
    </bean>

    <bean id="emailFileWriter" class="beeriprint.newsletter.batch.mailer.writers.EmailFileWriter" scope="step">
        <constructor-arg value="#{jobParameters[message_folder]}" />
    </bean>

    <!-- Import emails step -->

    <bean id="emailFolderReader" class="org.springframework.batch.item.file.ResourcesItemReader" scope="step">
        <property name="resources" value="file://#{jobParameters[message_folder]}/*.eml" />
    </bean>

    <bean id="compositeImportProcessor" class="org.springframework.batch.item.support.CompositeItemProcessor">
        <property name="delegates">
            <list>
                <bean class="beeriprint.newsletter.batch.mailer.processors.ResourceToMimeTransformer" />
                <bean class="beeriprint.newsletter.batch.mailer.processors.MimeToRecordTransformer" scope="step">
                    <constructor-arg value="#{jobParameters[template_name]}" />
                    <constructor-arg value="#{jobParameters[campaign_date]}" />
                    <constructor-arg ref="jdbcTemplate" />
                </bean>
            </list>
        </property>
    </bean>

    <bean id="insertEmailJdbcWriter" class="org.springframework.batch.item.database.JdbcBatchItemWriter">
        <property name="dataSource" ref="newsletterDataSource" />
        <property name="itemSqlParameterSourceProvider">
            <bean class="org.springframework.batch.item.database.BeanPropertyItemSqlParameterSourceProvider" />
        </property>
        <property 
            name="sql" 
            value="INSERT INTO email (id, campaign_id, recipient_name, user_part, domain_part, created) 
                VALUES (:id, :campaignId, :recipientName, :userPart, :domainPart, :creationTime)" />
    </bean>

    <!-- send emails step -->

    <!--
    emailFolderReader - defined in import step
    -->

    <bean id="compositeSendProcessor" class="org.springframework.batch.item.support.CompositeItemProcessor">
        <property name="delegates">
            <list>
                <bean class="beeriprint.newsletter.batch.mailer.processors.ResourceToMimeTransformer" />
            </list>
        </property>
    </bean>

    <bean id="emailSender" class="org.springframework.batch.item.mail.javamail.MimeMessageItemWriter">
        <property name="javaMailSender" ref="newsletterMailSender" />
    </bean>

    <!-- job specific resoruces: -->

    <context:property-placeholder location="classpath:templates/headers.xml"/>

    <bean id="freeMarkerConfigurationFactoryBean" class="org.springframework.ui.freemarker.FreeMarkerConfigurationFactoryBean">
        <property name="templateLoaderPath" value="classpath:templates" />
    </bean>

    <bean id="emailRecord" class="beeriprint.newsletter.batch.mailer.model.EmailRecord" scope="prototype"/>

    <bean id="stopListener" class="beeriprint.newsletter.batch.mailer.listeners.StopListener" />

    <!-- Newsletter database configuration -->

    <bean id="newsletterDataSource" class="org.apache.commons.dbcp2.BasicDataSource">
        <property name="driverClassName" value="${newsletter.jdbc.driver}" />
        <property name="url" value="${newsletter.jdbc.url}" />
        <property name="username" value="${newsletter.jdbc.user}" />
        <property name="password" value="${newsletter.jdbc.password}" />
        <property name="connectionProperties" value="useUnicode=true;characterEncoding=UTF-8;" />
    </bean>

    <!--  Initialise the database if enabled: -->
    <jdbc:initialize-database data-source="newsletterDataSource" enabled="${newsletter.data.source.init}" ignore-failures="DROPS">
        <jdbc:script location="${newsletter.drop.script}"/>
        <jdbc:script location="${newsletter.schema.script}"/>
    </jdbc:initialize-database>


    <!--  JDBC Template configuration -->
    <bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
        <property name="dataSource" ref="newsletterDataSource" />
    </bean>

    <!-- Mail sender configured for using newsletter server -->
    <bean id="newsletterMailSender" class="org.springframework.mail.javamail.JavaMailSenderImpl">
        <property name="host" value="${newsletter.mail.host}" />
        <property name="port" value="${newsletter.mail.port}" />
        <property name="username" value="${newsletter.mail.username}" />
        <property name="password" value="${newsletter.mail.password}" />
        <property name="defaultEncoding" value="UTF-8" />
        <property name="javaMailProperties">
            <props>
                <prop key="mail.smtp.auth">true</prop>
                <prop key="mail.smtp.starttls.enable">true</prop>
            </props>
        </property>
    </bean>

</beans>
