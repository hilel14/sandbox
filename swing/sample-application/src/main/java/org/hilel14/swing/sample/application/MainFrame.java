package org.hilel14.swing.sample.application;

import java.awt.Cursor;
import java.io.IOException;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.prefs.Preferences;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.SwingWorker;

/**
 *
 * @author hilel
 */
public class MainFrame extends javax.swing.JFrame implements ProgressListener {

    static final Logger LOGGER = Logger.getLogger(MainFrame.class.getName());
    static Preferences preferences = Preferences.userNodeForPackage(MainFrame.class);
    Path inFile;
    Path outFile;

    /**
     * Creates new form MainFrame
     */
    public MainFrame() {
        initComponents();
        loadPreferences();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        inputLabel = new javax.swing.JLabel();
        inputText = new javax.swing.JTextField();
        selectInputButton = new javax.swing.JButton();
        outputLabel = new javax.swing.JLabel();
        outputText = new javax.swing.JTextField();
        selectOutputButton = new javax.swing.JButton();
        runButton = new javax.swing.JButton();
        statusLabel = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Sample Application");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });
        getContentPane().setLayout(new java.awt.GridBagLayout());

        inputLabel.setText("input");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        getContentPane().add(inputLabel, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        getContentPane().add(inputText, gridBagConstraints);

        selectInputButton.setText("...");
        selectInputButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selectInputButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_END;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        getContentPane().add(selectInputButton, gridBagConstraints);

        outputLabel.setText("output");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        getContentPane().add(outputLabel, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        getContentPane().add(outputText, gridBagConstraints);

        selectOutputButton.setText("...");
        selectOutputButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selectOutputButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_END;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        getContentPane().add(selectOutputButton, gridBagConstraints);

        progressBar.setStringPainted(true);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        getContentPane().add(progressBar, gridBagConstraints);

        runButton.setText("run");
        runButton.setEnabled(false);
        runButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                runButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_END;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        getContentPane().add(runButton, gridBagConstraints);

        statusLabel.setText("status");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        getContentPane().add(statusLabel, gridBagConstraints);

        statusText.setEnabled(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        getContentPane().add(statusText, gridBagConstraints);

        setBounds(0, 0, 648, 246);
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        storePreferences();
    }//GEN-LAST:event_formWindowClosing

    private void selectInputButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selectInputButtonActionPerformed
        JFileChooser chooser = new JFileChooser();
        if (inFile.getParent() != null) {
            chooser.setCurrentDirectory(inFile.getParent().toFile());
        }
        int returnVal = chooser.showOpenDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            inputText.setText(chooser.getSelectedFile().getAbsolutePath());
            enableRunButton();
        }
    }//GEN-LAST:event_selectInputButtonActionPerformed

    private void selectOutputButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selectOutputButtonActionPerformed
        JFileChooser chooser = new JFileChooser();
        if (outFile.getParent() != null) {
            chooser.setCurrentDirectory(outFile.toFile());
        }
        int returnVal = chooser.showSaveDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            outputText.setText(chooser.getSelectedFile().getAbsolutePath());
            enableRunButton();
        }
    }//GEN-LAST:event_selectOutputButtonActionPerformed

    private void runButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_runButtonActionPerformed
        inFile = Paths.get(inputText.getText());
        outFile = Paths.get(outputText.getText());
        if (outFile.toFile().exists()) {
            //JOptionPane.showMessageDialog(this, "File already exist: \n" + outFile.getFileName(), "Warning", JOptionPane.WARNING_MESSAGE);
            int returnVal = JOptionPane.showConfirmDialog(
                    this,
                    "A file named " + outFile.getFileName() + " already exists. Replace it?",
                    "Confirmation",
                    JOptionPane.YES_NO_OPTION);
            if (returnVal != JOptionPane.YES_OPTION) {
                return;
            }
        }
        new Worker().execute();
    }//GEN-LAST:event_runButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                new MainFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel inputLabel;
    private javax.swing.JTextField inputText;
    private javax.swing.JLabel outputLabel;
    private javax.swing.JTextField outputText;
    private final javax.swing.JProgressBar progressBar = new javax.swing.JProgressBar();
    private javax.swing.JButton runButton;
    private javax.swing.JButton selectInputButton;
    private javax.swing.JButton selectOutputButton;
    private javax.swing.JLabel statusLabel;
    private final javax.swing.JTextField statusText = new javax.swing.JTextField();
    // End of variables declaration//GEN-END:variables

    private void loadPreferences() {
        // frame size and location
        int x = preferences.getInt("MainFrame.left", 10);
        int y = preferences.getInt("MainFrame.top", 25);
        int w = preferences.getInt("MainFrame.width", 600);
        int h = preferences.getInt("MainFrame.height", 300);
        setBounds(x, y, w, h);
        // paths
        inFile = Paths.get(preferences.get("MainFrame.inFile", ""));
        outFile = Paths.get(preferences.get("MainFrame.outFile", ""));
    }

    private void storePreferences() {
        // frame size and location
        preferences.putInt("MainFrame.left", getBounds().x);
        preferences.putInt("MainFrame.top", getBounds().y);
        preferences.putInt("MainFrame.width", getBounds().width);
        preferences.putInt("MainFrame.height", getBounds().height);
        // paths
        preferences.put("MainFrame.inFile", inFile.toString());
        preferences.put("MainFrame.outFile", outFile.toString());
    }

    private void enableRunButton() {
        runButton.setEnabled(false);
        // input field not empty
        if (inputText.getText().trim().isEmpty()) {
            return;
        }
        // output field not empty
        if (outputText.getText().trim().isEmpty()) {
            return;
        }
        // ready to run
        runButton.setEnabled(true);
    }

    @Override
    public void showProgress(int percent) {
        progressBar.setValue(percent);
    }

    @Override
    public void showMessage(String message) {
        statusText.setText(message);
    }

    class Worker extends SwingWorker<Void, Integer> {

        @Override
        protected Void doInBackground() {
            // adjust gui controls
            runButton.setEnabled(false);
            selectInputButton.setEnabled(false);
            selectOutputButton.setEnabled(false);
            setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
            progressBar.setValue(0);
            statusText.setText("");
            // run
            try {
                FileProcessor processor = new FileProcessor(MainFrame.this);
                processor.processFile(inFile, outFile);
                JOptionPane.showMessageDialog(null, "The operation completed successfully", "Information", JOptionPane.INFORMATION_MESSAGE);
            } catch (IOException ex) {
                LOGGER.log(Level.SEVERE, null, ex);
                statusText.setText(ex.toString());
                JOptionPane.showMessageDialog(null, ex.toString(), "Error", JOptionPane.ERROR_MESSAGE);
            }
            // restpre gui controls
            runButton.setEnabled(true);
            selectInputButton.setEnabled(true);
            selectOutputButton.setEnabled(true);
            setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
            // done
            return null;
        }
    }
}
